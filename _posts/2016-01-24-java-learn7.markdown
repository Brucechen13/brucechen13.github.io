---
layout:     post
title:      "深入理解JAVA虚拟机学习笔记"
subtitle:   "第八章 虚拟机字节码执行引擎"
date:       2016-01-24
author:     "brucechen"
header-img: "img/post-bg-java.jpg"
tags:
    - Java
    - 读书笔记
---

### 虚拟机执行引擎
虚拟机的执行引擎不同于物理机的执行引擎，不需要受限于处理器、硬件、指令集和操作系统，可以自行制定指令集和执行引擎的结构体系，并能够执行那些不被硬件直接支持的指令集格式。
运行时栈帧，用于支持虚拟机进行方法调用和方法执行的数据结构，是运行时数据区中虚拟机栈的栈元素。栈帧存储了方法的局部数量表、操作数栈、动态连接和方法返回地址和一些额外的附加信息，栈帧需要多大的局部变量表和多深的操作数栈在方法编译时就可以确定，并写在方法表的Code属性中，因此，栈帧需要分配多少内存与程序运行期变量数据没有关系，只取决于具体的虚拟机实现。
* 局部变量表
一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。方法表中Code属性的max_locals数据项确定了该方法所需分配的局部变量表最大容量。
局部变量表的容量以变量槽(slot)为最小单位。
* 操作数栈
一个后入先出栈，最大深度写到Code属性的max_stacks数据项。
* 动态连接
每个栈帧都包括一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。
* 方法返回地址
当一个方法开始执行后，只有两种方式可以退出这个方法，一种是执行引擎遇到任意一个方法返回的字节码指令，这个时候返回到上层的方法调用者，这种退出方式称为正常完成入口。
另一种是方法执行过程中遇到了异常，并且这个异常没有在方法体内得到处理，导致方法退出，这种方式称为异常完成出口，异常完成出口不会产生任何返回值。

### 方法调用
方法调用不等于方法执行，方法调用阶段的唯一任务是确定被调用方法的版本，即需要调用哪一个方法。所有方法调用的目标方法在Class文件中都是一个常量池的符号引用，类加载的解析阶段会将一部分符号引用转换为直接引用，这种解析成立的前提是方法在程序运行前就有一个可确定的调用版本，并且在运行期不可改变。
符合这种编译器可知、运行期不可变要求的方法，主要包括静态方法、私有方法、实例构造器、父类方法，前者与类型直接关联，后者外部不可访问。因此都无法通过继承或别的方法重写其他版本。
方法重载通过参数的静态类型而不是实际类型来决定使用哪个重载版本，所以编译器就可以确定调用方法的版本，这种分派动作称为 **静态分派** 。
重载方法的选取有时候并不是唯一的，一般会按照`char->int->long->float->double`的顺序转型进行匹配，然后是对象、接口、可见变长参数。
重写方法则无法在编译时确定，分派调用的方法需要通过invokevirtual指令执行，解析过程大致分为以下几个步骤：
1. 找到操作数栈顶的第一个元素所指向的对象实际类型，记作C
2. 如果在类型C中找到与常量中描述符和简单名称都相符的方法，则进行访问权限校验，通过则返回这个方法的直接引用，否则返回`java.lang.IllegalAccessError`异常
3. 如果找不到方法，则按照继承关系从下往上依次对C的各个父类进行2中的搜索
4. 如果始终没有找到，则抛出`java.lang.AbstractMethodError`异常。
运行期进行分派的过程叫做 **动态分派。**
方法的接收者和方法参数称为方法的 **宗量** ，根据分派基于多少宗量，将分派分为单分派和多分派，静态分派需要依赖于方法的接收者和参数类型，所以属于JAVA语言的静态分派属于多分派。动态分派时，因为已经确定了方法的参数类型，所以只需要关系方法的接收者的类型，所以JAVA语言的动态分派属于单分派类型。
动态分派时非常频繁的动作，所以出于性能的考虑，一般不会逐一搜索类的方法元数据，常用的手段是在类的方法区建立一个虚方法表，使用虚方法表索引来代替元数据查找。虚方法表结构示例如下：

![java-javascript](/img/in-post/java-virtual-machine/virtual-method-table.png)
<small class="img-hint">虚方法表</small>

### 动态类型语言支持

##### MethodHandle
动态类型语言的关键特征在于类型检查的主体过程发生在运行期，JDK1.7提供了`java.lang.invoke`包实现动态语言支持。这个包的主要目的是在之前单纯依靠符号引用来确定调用的目标方法这种方式以外，提供一种新的动态确定目标方法的机制，称为`MethodHandle`。

```java
import static java.lang.invoke.MethodHandles.lookup;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodType;
/**
* JSR-292 Method Handle基础用法演示
*/
public class MethodHandleTest {    
	static class ClassA {        
	public void println(String s) {            
		System.out.println(s);        
	}    
}    
public static void main(String[] args) throws Throwable {        
	Object obj = System.currentTimeMillis() % 2 == 0 ? System.out : new ClassA();        
	// 无论obj最终是哪个实现类，下面这句都能正确调用到println方法        getPrintlnMH(obj).invokeExact("icyfenix");    
}    
	private static MethodHandle getPrintlnMH(Object reveiver) throws Throwable {        
		// MethodType：代表“方法类型”，包含了方法的返回值（methodType()的第一个参数）和具体参数（methodType()第二个及以后的参数）
		MethodType mt = MethodType.methodType(void.class, String.class);        
		// lookup()方法来自于MethodHandles.lookup，这句的作用是在指定类中查找符合给定的方法名称、方法类型，并且符合调用权限的方法句柄        // 因为这里调用的是一个虚方法，按照Java语言的规则，方法第一个参数是隐式的，代表该方法的接收者，也即是this指向的对象，这个参数以前是放在参数列表中进行传递的，而现在提供了bindTo()方法来完成这件事情        
		return lookup().findVirtual(reveiver.getClass(), "println", mt).bindTo(reveiver);    
	}
}
```
`MethodHandle`的使用方法和效果与`Reflection`有众多相似之处，不过，它们还是有以下这些区别：从本质上讲，`Reflection`和`MethodHandle`机制都是在模拟方法调用，但`Reflection`是在模拟Java代码层次的方法调用，而`MethodHandle`是在模拟 **字节码层次** 的方法调用。在Method-Handles.lookup中的3个方法——findStatic()、findVirtual()、findSpecial()正是为了对应于invokestatic、invokevirtual&in-vokeinterface和invokespecial这几条字节码指令的执行权限校验行为，而这些底层细节在使用Reflection API时是不需要关心的。Reflection中的java.lang.reflect.Method对象远比Method-Handle机制中的java.lang.invoke.MethodHandle对象所包含的信息多。前者是方法在Java一端的全面映像，包含了方法的签名、描述符以及方法属性表中各种属性的Java端表示方式，还包含执行权限等的运行期信息。而后者仅仅包含与执行该方法相关的信息。用通俗的话来讲，Reflection是重量级，而Method-Handle是轻量级。由于MethodHandle是对字节码的方法指令调用的模拟，所以理论上虚拟机在这方面做的各种优化（如方法内联），在MethodHandle上也应当可以采用类似思路去支持。而通过反射去调用方法则不行。
除此之外，Reflection API的设计目标是只为Java语言服务的，而MethodHandle则设计成可服务于所有Java虚拟机之上的语言，其中也包括Java语言。

##### invokedynamic
在某种程度上，invokedynamic指令与MethodHandle机制的作用是一样的，都是为了解决原有4条`invoke*`指令方法分派规则固化在虚拟机之中的问题，把如何查找目标方法的决定权从虚拟机转嫁到具体用户代码之中，让用户（包含其他语言的设计者）有更高的自由度。而且，它们两者的思路也是可类比的，可以把它们想象成为了达成同一个目的，一个采用上层Java代码和API来实现，另一个用字节码和Class中其他属性、常量来完成。
每一处含有invokedynamic指令的位置都称做“动态调用点”（`Dynamic Call Site`），这条指令的第一个参数不再是代表方法符号引用的`CONSTANT_Methodref_info`常量，而是变为JDK 1.7新加入的`CONSTANT_InvokeDynamic_info`常量，从这个新常量中可以得到3项信息：引导方法（`Bootstrap Method`，此方法存放在新增的`BootstrapMethods`属性中）、方法类型（`MethodType`）和名称。引导方法是有固定的参数，并且返回值是`java.lang.invoke.CallSite`对象，这个代表真正要执行的目标方法调用。根据`CONSTANT_InvokeDynamic_info`常量中提供的信息，虚拟机可以找到并且执行引导方法，从而获得一个`CallSite`对象，最终调用要执行的目标方法。
示例代码如下：

```java
import static java.lang.invoke.MethodHandles.lookup;
import java.lang.invoke.CallSite;
import java.lang.invoke.ConstantCallSite;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
public class InvokeDynamicTest {    
	public static void main(String[] args) throws Throwable {        		
		INDY_BootstrapMethod().invokeExact("icyfenix");    
	}    
	public static void testMethod(String s) {        
		System.out.println("hello String:" + s); 
	}    
	public static CallSite BootstrapMethod(MethodHandles.Lookup lookup, String name, MethodType mt) throws Throwable {        
		return new ConstantCallSite(lookup.findStatic(InvokeDynamicTest.class, name, mt));    
	}    
	private static MethodType MT_BootstrapMethod() {        
		return MethodType.fromMethodDescriptorString(            "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;",            null);    
	}    
	private static MethodHandle MH_BootstrapMethod() throws Throwable {        
		return lookup().findStatic(InvokeDynamicTest.class, "BootstrapMethod", MT_BootstrapMethod());    
	}    
	private static MethodHandle INDY_BootstrapMethod() throws Throwable {        
		CallSite cs = (CallSite) MH_BootstrapMethod().invokeWithArguments(lookup(), "testMethod",        
		MethodType.fromMethodDescriptorString("(Ljava/lang/String;)V", null));        
		return cs.dynamicInvoker();    
	}
}
```
由于invokedynamic指令所面向的使用者并非Java语言，而是其他Java虚拟机之上的动态语言，因此仅依靠Java语言的编译器Javac没有办法生成带有invokedynamic指令的字节码，我们可以借助一个可以将程序的字节码转换为使用invokedynamic的简单工具INDY来完成这件事情，我们要使用这个工具来产生最终要的字节码，因此这个示例代码中的方法名称不能随意改动，更不能把几个方法合并到一起写，因为它们是要被INDY工具读取的。转换后的字节码主要内容如下：

```bash
Constant pool:    
	#121 = NameAndType #33:#30 // testMethod:(Ljava/lang/String;)V    
	#123 = InvokeDynamic #0:#121 // #0:testMethod:(Ljava/lang/String;)V
public static void main(java.lang.String[]) throws java.lang.Throwable;    
	Code:        
		stack=2, locals=1, args_size=1        
		0: ldc #23 // String abc        
		2: invokedynamic #123, 0 // InvokeDynamic #0:testMethod:(Ljava/lang/String;)V        
		7: nop        
		8: return
public static java.lang.invoke.CallSite BootstrapMethod(java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType) throws java.lang.Throwable;    
	Code:        
		stack=6, locals=3, args_size=3        
		0: new #63 // class java/lang/invoke/ConstantCallSite        
		3: dup        
		4: aload_0        
		5: ldc #1 // class org/fenixsoft/InvokeDynamicTest        
		7: aload_1        
		8: aload_2        
		9: invokevirtual #65 // Method java/lang/invoke/MethodHandles$Lookup.findStatic:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;        
		12: invokespecial #71 // Method java/lang/invoke/ConstantCallSite."<init>":(Ljava/lang/invoke/MethodHandle;)V
		15: areturn
```