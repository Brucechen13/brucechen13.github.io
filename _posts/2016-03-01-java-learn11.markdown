---
layout:     post
title:      "深入理解JAVA虚拟机学习笔记"
subtitle:   "第12章 Java内存模型与线程"
date:       2016-03-01
author:     "brucechen"
header-img: "img/post-bg-java.jpg"
published: false
tags:
    - Java
    - 读书笔记
---

### 高速缓存
现代计算机为了解决处理器与内存之间的速度矛盾，加入了一层读写速度尽量接近处理器速度的高速缓存，作为内存与处理器之间的缓冲，将运算需要使用到的数据复制到缓存中，运算结束后再从缓存同步到内存中，这样处理器就不需要等待缓慢的内存读写了。
基于高速缓存的存储交互在提高效率的同时也引进了新的问题，那就是缓存一致性。多处理器系统中，每个处理器都有自己的缓存，缓存又共享同一主内存，当多个处理器运算涉及同一块主内存时，就会出现缓存数据与主内存数据一致性的问题。为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有MSI、MESI（Illinois Proto-col）、MOSI、Synapse、Firefly及Dragon Proto-col等。

### Java内存模型 
内存模型就是在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象。Java虚拟机规范中试图定义一种Java内存模型（`Java Memory Model, JMM`）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。
Java内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。这里的变量指的是存储在主内存中可能被其他线程访问的数据，包括实例字段，静态字段和数组对象。
Java内存模型规定所有变量存储在主内存中，每个线程还有自己的工作内存（类似处理器高速缓存），工作内存存储了该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存进行，不能读写主内存中的变量。不同线程也无法访问对方工作内存中的变量。