---
layout:     post
title:      "深入理解JAVA虚拟机学习笔记"
subtitle:   "第二章 JAVA内存区域"
date:       2016-01-24
author:     "brucechen"
header-img: "img/post-bg-java.jpg"
tags:
    - Java
    - 读书笔记
---

### JAVA 虚拟机内存
JAVA虚拟机在JAVA程序运行时会将内存分为若干个数据区域，分别存储不同类型数据，具有各自的生命周期。根据JAVA虚拟机规范，JAVA虚拟机管理的内存包括以下几个数据区域：

![java-javascript](/img/in-post/java-virtual-machine/java-memory.png)
<small class="img-hint">JAVA虚拟机内存</small>

* 程序计数器
一块较小的内存，可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型中，字节码解释器就是通过改变计数器的值来选取下一条需要执行的字节码指令。分支、循环、跳转、异常处理、线程恢复等基础工程都需要程序计数器来辅助实现。
JAVA虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现，所以为了线程切换后能恢复到正确的执行位置，每个线程都需要一个独立的程序计数器来实现。
如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在Java虚拟机规范中没有规定任何`OutOfMemory-Error`情况的区域。
JVM虚拟机通过程序计数器来实现线程的切换。
* 虚拟机栈
线程私有的，生命周期与线程相同，虚拟机栈描述的是JAVA方法执行时的内存模型，虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（`Stack Frame`）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。通常所说的堆栈中的栈指的就是虚拟机栈，或者说栈中的局部变量表，存储函数中的局部变量。
局部变量表存放了编译期可知的各种基本数据类型（`boolean、byte、char、short、int、float、long、double`）、对象引用（`reference`类型，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和`returnAddress`类型（指向了一条字节码指令的地址）。
其中64位长度的`long`和`double`类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。运行时生成的数组并不存储在栈中，而是存储在堆上，即使是基本类型的数组。
* 本地方法栈
类似于虚拟机栈，只是本地方法栈存储的是虚拟机使用的Native方法的内存模型。
* 堆
被所有线程共享的一块内存区域，虚拟机启动时创建。Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。
JAVA堆是垃圾收集器管理的主要区域，现在收集器几乎都采用分代收集算法，所以JAVA堆又可以分为新生代和老年代。
线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（`Thread Local Allocation Buffer,TLAB`）。
Java虚拟机规范规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。
* 方法区
线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。部分程序员习惯称之为永久代，不过严格来讲并不确切，一部分虚拟机并没有按照永久代的收集方式回收这部分内存。
JAVA虚拟机规范对方法区的限制非常宽泛，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这区域的内存回收目标主要是针对常量池的回收和对类型的卸载。
运行时常量池是方法区的一部分，Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（`Constant Pool Table`），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。运行时常量池的一个重要特征就是具有动态性，程序运行时也可以将新的常量放入池中，比如String类的intern()方法，就是将字符串常量加到运行时常量池中。

### 对象的创建过程
虚拟机遇到一条new指令时，首先查找这个指令的参数能否在常量池中定位到一个类的符号引用，然后检查这个符号引用代表的类是否已被加载、解析、初始化过，如果没有，执行相应的类加载过程。否则，说明之前加载过这个类，直接为新对象分配内存，对象所需内存的大小在类加载完成后便可完全确定，为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。如果内存是规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离，这种分配方式称为 **“指针碰撞”** 。否则，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为 **“空闲列表”** 。在多线程环境下，即使是最简单的指针碰撞都不是线程安全的，为了确保指针在线程中可以修改，有两种解决办法，一种是对分配内存空间的动作进行同步处理——实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性；另一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲。哪个线程要分配内存，就在哪个线程的TLAB上分配，只有TLAB用完并分配新的TLAB时，才需要同步锁定。
内存分配完成后，将对内存除了对象头的部分都初始化为零值，保证了实例对象可以在实例字段没有赋值的情况下使用。然后初始化对象头的信息，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。
在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。
对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为`MarkWord`。另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中却无法确定数组的大小。
实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。
对齐填充起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，而对象头部分正好是8字节的倍数（1倍或者2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。

### 对象访问定位
JAVA程序需要通过栈上的reference定位到堆中的对象，主流的访问方式又通过句柄和直接指针两种。通过句柄访问的话需要分出一部分内存作为句柄池，reference存储对象的句柄位置，句柄中包括对象的实例数据和类型数据各自的地址。

![java-javascript](/img/in-post/java-virtual-machine/handle.png)
<small class="img-hint">句柄访问</small>

如果采用直接指针访问，reference直接存储对象地址，再由对象访问类型数据。

![java-javascript](/img/in-post/java-virtual-machine/direct.png)
<small class="img-hint">直接指针访问</small>

句柄访问的优点在于对象移动时只需要修改句柄的实例数据指针，reference本身不需要修改。缺点是访问对象需要两次指针定位。