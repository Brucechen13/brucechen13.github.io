---
layout:     post
title:      "深入理解JAVA虚拟机学习笔记"
subtitle:   "第一章 JAVA概述"
date:       2016-01-24
author:     "brucechen"
header-img: "img/post-bg-java.jpg"
tags:
    - Java
    - 读书笔记
---

### 概述

本章主要介绍JAVA语言历史，特性以及JAVA虚拟机的发展历程和技术区别，并介绍了如何在不同操作系统下编译Open JDK。

### JAVA技术体系


* JAVA虚拟机
 + Sun Classic VM
 JDK1.0所带的虚拟机，被誉为第一款商用JAVA虚拟机，使用纯解释器来执行JAVA代码，如果需要使用JIT编译器（即即时编译器），则必须使进行外挂，这时编译器会完全接管虚拟机的执行系统，解释器也就无法工作。由于编译器无法和解释器同时工作，导致编译器需要对所有代码无筛检的编译，因此当时的编译过程较慢。
 + Exact VM
为了解决Sun Classic VM编译较慢而开发的新一款虚拟机，使用如两级即时编译器、编译器与解释器混合工作模式等更高效的方式。除此之外，它具有准确式内存管理的特点，即虚拟机可以知道内存中某个位置的数据具体是什么类型，比如内存区域中有一块区域里面的数据是123456，那么只有在知道这个数据类型具体是什么的情况下才可以进行垃圾回收，比如如果这是一个引用，那么123456地址的内存就不能进行垃圾回收。而传统的Classic VM基于handler的对象查找方式，来保证GC不会回收带有引用的对象，但是这样导致定位对象需要两次查找，增加了开销。
 + HotSpot
 VM是如今使用最广的虚拟机，同样具有准确式内存管理的特点，还具有热点代码探测能力，可以通过执行计数器找出最具有编译价值的代码，然后通知JIT编译器以方法为单位进行编译。如果一个方法被频繁调用，或方法中有效循环次数很多，将会分别触发标准编译和OSR（栈上替换）编译动作。通过编译器与解释器恰当地协同工作，可以在最优化的程序响应时间与最佳执行性能中取得平衡，而且无须等待本地代码输出才能执行程序。

### JAVA发展趋势：

* 模块化：可以避免因为系统增加功能而不得不重新下载安装部署整个系统，是建立各种功能标准间的前提。OSGi（面向Java的动态模型系统）的快速发展说明模块化将成为在未来不可避免的技术潮流。
* 混合语言
* 多核执行。java.util.concurrent包和JDK7出现的java.util.concur-rent.forkjoin包可以轻松利用多核资源协作完成任务，而JDK8出现的Lambda函数式编程则使得并行操作更为便捷。

* 语法进一步丰富
* 支持64位虚拟机

### 编译JDK：
如今JDK已经出到了8，而openjdk8在linux下的编译变得更加简单，官方提供了自动化脚本，可以自动查找所需组件，可以根据提示注意安装即可。

**编译环境：** 
*ubuntu13.04* 

**操作步骤：** 
1. 安装mercurial 

```
sudo apt-get install mercurial 
```
mercurial是openjdk的代码版本管理工具，使用方式类似Git，直接从仓库克隆即可。
2. 下载代码
 
```
hg clone http://hg.openjdk.java.net/jdk8u/jdk8u jdk8u
```
下载到`jdk8u`目录中
3. 进入目录，下载后可以直接阅读目录下`README-builds.html`，里面介绍了jdk编译的流程以及相关指令。按照提示，首先执行`get_source.sh`。

```
cd jdk8u bash ./get_source.sh
```
脚本会自动检测所需组件。
4. 执行`configure脚本`，检测当前系统配置是否正常，如果执行Make All进行编译

```
bash ./configure
make all
```
如果之前在环境变量中定义了JAVA_HOME,需要取消。
5. 安装需要的软件

```
sudo apt-install build-essential 
sudo apt-get install libX11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev 
sudo apt-get install libcups2-dev 
sudo apt-get install libfreetype6-dev 
sudo apt-get install libasound2-dev 
sudo apt-get install ccache 
```
安装检测过程中所有提及的依赖项
6. 如此之外还遇到了一下问题

```
Depends: python:any (>= 2.7.1-0ubuntu2) but it is not installable 
```

解决方法

```
sudo apt-get aptitude 
```

使用这个工具，当某个库依赖的库与当前版本不一致时，`aptitude` 会尝试降级当前这个库的版本，同时解决降级这个库对其它软件的依赖性的影响， 最终成功安装apt-get没法安装的软件
 
```
cc1plus: error: the "stabs" debug format cannot be used with pre-compiled headers [-Werror=deprecate]
```

解决方法
因为高版本的gcc不再支持stabs，解决办法：在make命令中加上 DEBUG_BINARIES=true
7. 之后，jdk顺利编译成功

```
## Finished jdk (build time 00:09:40) 

----- Build times ------- 
Start 2015-10-21 22:32:23 
End   2015-10-21 23:16:43 
00:01:15 corba 
00:31:27 hotspot 
00:00:46 jaxp 
00:01:09 jaxws 
00:09:40 jdk 
00:00:00 langtools 
00:44:20 TOTAL 
------------------------- 
Finished building OpenJDK for target 'default' 
```
进行调试测试，展示一个启动 GDB, 加断点，并运行一个 Java 程序的过程。

```
$ gdb java GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04 Copyright (C) 2012 
Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <
http://gnu.org/licenses/gpl.html> This is free software: you are free to change and 
redistribute it. There is NO WARRANTY, to the extent permitted by law. Type "show copying" 
and "show warranty" for details. This GDB was configured as "i686-linux-gnu". For bug 
reporting instructions, please see: <http://bugs.launchpad.net/gdb-linaro/>... Reading 
symbols from /home/minix/openjdk8/jdk8u/build/fastdebug/jdk/bin/java...done. (gdb) b main 
Breakpoint 1 at 0x8048410: file /home/minix/openjdk8/jdk8u/jdk/src/share/bin/main.c, line 
94. (gdb) r -classpath PossibleReordering Starting program: 
/home/minix/openjdk8/jdk8u/build/fastdebug/jdk/bin/java -classpath PossibleReordering 
[Thread debugging using libthread_db enabled] Using host libthread_db library 
"/lib/i386-linux-gnu/libthread_db.so.1". Breakpoint 1, main (argc=3, argv=0xbfffeca4) at 
/home/minix/openjdk8/jdk8u/jdk/src/share/bin/main.c:94
```

