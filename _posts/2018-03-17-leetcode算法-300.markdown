---
layout:     post
title:      "LeetCode笔记"
subtitle:   "Longest Increasing Subsequence"
date:       2018-03-17
author:     "brucechen"
header-img: "img/post-bg-java.jpg"
published: true
tags:
    - Java
    - 读书笔记
---

### 介绍

给定一组未排序的整数数组，找出最长的递增子串的长度，不要求子串连续。

例如：
给定[10, 9, 2, 5, 3, 7, 101, 18]，最长的子串为[2, 3, 7, 101]，所以长度为4。
注意有可能存在多余一个的最长子串，只需要返回子串的长度。


### 算法思路

##### 方法1

定义从末尾到某个位置的最长距离，
如上述数组，从末尾开始遍历：
18，长度为1
101，长度为1
7,7<101&7<18，长度为max(1+1,1+1)
以此类推，可求出每个位置的最长距离
代码如下：
```
int[] maxLens = new int[nums.length];//定义从末尾到当前位置的最长递增子串
int res = 0;
for(int i = nums.length-1; i >= 0; i --){
    int maxLen = 0;
    for(int j = i+1; j < nums.length; j ++){
        if(nums[i] < nums[j] && maxLen < maxLens[j]){
            maxLen = maxLens[j];
        }
    }
    maxLens[i] = maxLen+1;
    res = Math.max(res, maxLens[i]);
}

return res;
```


#### 方法2

观察最长子串的规律易发现，最长子串为从左到右遍历中某个片段最小的子串，故可以通过定义缓存数据保存最小的数字来记录子串长度。

代码如下：
```
for (int i = 0; i < len; i++) {
    LIS[i] = Integer.MAX_VALUE;//定义的缓存数组
}

int maxLen = 0;
for (int i = 0; i < len; i++) {
    int index = getIndex(LIS, nums[i]);//二分查找找到该数字在缓存数组中的位置
    LIS[index] = nums[i];
    maxLen = Math.max(maxLen, index + 1);
}
```

