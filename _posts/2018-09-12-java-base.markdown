---
layout:     post
title:      "Java基本知识笔记"
subtitle:   "集合类"
date:       2018-09-12
author:     "brucechen"
header-img: "img/post-bg-java.jpg"
published: false
tags:
    - Java
    - 读书笔记
---

### Java.util集合类

- ArrayList与LinkedList的异同
 
  1. 都是线程不安全
  2. ArrayList底层使用数组，LinkedList使用双向循环链表
  3. ArrayList的空间占用在于会预留一部分位置存放新元素，LinkedList则是每个元素需要存多余的信息


- ArrayList 与 Vector 区别
  
  Vector所有方法都是同步，使用`synchronized`关键字，效率较低，不推荐使用
  

- HashMap的底层实现

  1. HashMap底层使用数组+链表Hash实现
  2. HashMap的容量为2的n次幂-1，主要是为了在hash的时候可以直接按位与，极可能让结果均匀分布。
  3. JDK1.8中当拉链的长度大于阈值（默认为8）时，会将链表改为红黑树，减少检索时间。


- HashMap 和 Hashtable 的区别

  1. HashMap是线程不安全的，Hashtable是线程安全的，使用`synchronized`关键字,性能较低，多线程需求的Map可以使用ConcurrentHashMap。
  2. HashMap中键值可以为null，Hashtable键值都不可以是null。
  3. Hashtable初始容量为11，每次扩容为2n+1；HashMap初始容量为16，每次扩容为原来的两倍


- HashSet 和 HashMap 区别
  1. HashSet实现了Set接口，HashMap实现了Map接口
  2. HashSet底层使用HashMap实现
  3. HashMap相较于HashSet快，因为他是使用了唯一的键获取对象

- ConcurrentHashMap线程安全的具体实现方式/底层具体实现
  1. 在JDK1.7的时候，ConcurrentHashMap（分段锁） 对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。（默认分配16个Segment，比Hashtable效率提高16倍。） 
  2. JDK1.8 的时候已经摒弃了Segment的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。（JDK1.6以后 对 synchronized锁做了很多优化） 整个看起来就像是优化过且线程安全的 HashMap，虽然在JDK1.8中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲突，就不会产生并发，效率又提升N倍。
  3.  Hashtable(同一把锁) :使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。

**Hashtable全表锁**

![Hashtable全表锁](https://camo.githubusercontent.com/b8e66016373bb109e923205857aeee9689baac9e/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d382d32322f35303635363638312e6a7067 "Hashtable全表锁")

**ConcurrentHashMap分段锁**

![ConcurrentHashMap分段锁](https://camo.githubusercontent.com/443af05b6be6ed09e50c78a1dca39bf75acb106d/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d382d32322f33333132303438382e6a7067)


**JDK1.8ConcrentHashMap**

![JDK1.8ConcrentHashMap](https://camo.githubusercontent.com/2d779bf515db75b5bf364c4f23c31268330a865e/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d382d32322f39373733393232302e6a7067 "JDK1.8ConcrentHashMap")