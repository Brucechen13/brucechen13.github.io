---
layout:     post
title:      "深入理解JAVA虚拟机学习笔记"
subtitle:   "第11章 运行期优化"
date:       2016-02-25
author:     "brucechen"
header-img: "img/post-bg-java.jpg"
published: false
tags:
    - Java
    - 读书笔记
---

### 即时编译器
即时编译器并不是虚拟机必须的部分，也没有在Java虚拟机规范中涉及，但是即时编译器性能的好坏却是衡量一款商用虚拟机优秀与否的最关键指标之一，也是虚拟机最核心最能体现虚拟机技术水平的部分。
即时编译器就是当虚拟机发现某个方法或代码块运行特别频繁，就会认定这些代码为`热点代码`，为了提高热点代码执行效率，虚拟机就会在运行时将这些代码编译成本地平台相关的机器码，并进行各种层次的优化，完成这个任务的编译器成为即时编译器（Just In Time Compiler，简称JIT编译器）

#### 编译对象与触发条件
运行过程中会被编译器编译成`热点代码`的有两类：
* 被多次调用的方法
* 被多次执行的循环体
判断一段代码是不是热点代码，这样的行为称为热点探测，目前主流的热点探测判定方式有两种：

* 基于采样的热点探测，虚拟机会周期性检查各个线程的栈顶，如果发现某个方法经常性出现在栈顶，那这个方法就是`热点方法`。缺点是很难精确确认一个方法的热度，容易受线程阻塞或其他外界因素影响。
* 基于计数器的热点探测，虚拟机为每个方法（甚至是代码块）建立计数器，统计方法执行次数，超过一定阀值认定为`热点方法`。

HotSpot采用第二种方法，为每个方法准备了两种计数器：
* 方法调用计数器，统计方法调用次数
* 回边计数器，统计方法循环体代码执行次数，字节码中遇到控制流向后跳转的指令称为`回边`。

### 编译优化技术
常见的编译优化技术如下：
* 公共子表达式消除
如果一个表达式E已经计算过，并且从之前的计算到现在E中的所有变量的值都没有变化，那么E就成了公共子表达式，直接使用前面计算过的结果代替E就可以了。
如`int d = (c*b)*12 + a + (a + b*c);`,优化后变为`int d = E*12 + a + (a+E);`。
* 数组边界检查消除
通过数组边界检查将运行期的边界检查提前到编译器执行，也可以通过隐式异常处理在不发生异常时规避安全检查。
* 方法内联
Java语言的多态性，内联有可能与虚方法产生矛盾，如果当前存在多个版本的方法可供选择，内联就属于激进优化。
* 逃逸分析
分析对象是否是线程独立的，也就是不会通过逃逸到别的线程，别的线程没有任何途径可以访问到这个对象，这时可以对这种对象做一些优化。
